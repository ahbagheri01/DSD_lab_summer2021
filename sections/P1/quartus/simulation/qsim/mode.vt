// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/24/2021 00:10:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mode
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mode_vlg_sample_tst(
	firstdigit,
	forthdigit,
	seconddigit,
	thirddigit,
	sampler_tx
);
input [3:0] firstdigit;
input [3:0] forthdigit;
input [3:0] seconddigit;
input [3:0] thirddigit;
output sampler_tx;

reg sample;
time current_time;
always @(firstdigit or forthdigit or seconddigit or thirddigit)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mode_vlg_check_tst (
	mode3,
	mode11,
	sampler_rx
);
input  mode3;
input  mode11;
input sampler_rx;

reg  mode3_expected;
reg  mode11_expected;

reg  mode3_prev;
reg  mode11_prev;

reg  mode3_expected_prev;
reg  mode11_expected_prev;

reg  last_mode3_exp;
reg  last_mode11_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	mode3_prev = mode3;
	mode11_prev = mode11;
end

// update expected /o prevs

always @(trigger)
begin
	mode3_expected_prev = mode3_expected;
	mode11_expected_prev = mode11_expected;
end



// expected mode3
initial
begin
	mode3_expected = 1'bX;
end 

// expected mode11
initial
begin
	mode11_expected = 1'bX;
end 
// generate trigger
always @(mode3_expected or mode3 or mode11_expected or mode11)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mode3 = %b | expected mode11 = %b | ",mode3_expected_prev,mode11_expected_prev);
	$display("| real mode3 = %b | real mode11 = %b | ",mode3_prev,mode11_prev);
`endif
	if (
		( mode3_expected_prev !== 1'bx ) && ( mode3_prev !== mode3_expected_prev )
		&& ((mode3_expected_prev !== last_mode3_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode3_expected_prev);
		$display ("     Real value = %b", mode3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mode3_exp = mode3_expected_prev;
	end
	if (
		( mode11_expected_prev !== 1'bx ) && ( mode11_prev !== mode11_expected_prev )
		&& ((mode11_expected_prev !== last_mode11_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mode11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mode11_expected_prev);
		$display ("     Real value = %b", mode11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mode11_exp = mode11_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mode_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] firstdigit;
reg [3:0] forthdigit;
reg [3:0] seconddigit;
reg [3:0] thirddigit;
// wires                                               
wire mode3;
wire mode11;

wire sampler;                             

// assign statements (if any)                          
mode i1 (
// port map - connection between master ports and signals/registers   
	.firstdigit(firstdigit),
	.forthdigit(forthdigit),
	.mode3(mode3),
	.mode11(mode11),
	.seconddigit(seconddigit),
	.thirddigit(thirddigit)
);
// firstdigit[ 3 ]
initial
begin
	firstdigit[3] = 1'b0;
	firstdigit[3] = #10000 1'b1;
	firstdigit[3] = #60000 1'b0;
	firstdigit[3] = #340000 1'b1;
	firstdigit[3] = #50000 1'b0;
	firstdigit[3] = #10000 1'b1;
	firstdigit[3] = #50000 1'b0;
	firstdigit[3] = #440000 1'b1;
	# 400000;
	repeat(7)
	begin
		firstdigit[3] = 1'b0;
		firstdigit[3] = #400000 1'b1;
		# 400000;
	end
	firstdigit[3] = 1'b0;
end 
// firstdigit[ 2 ]
initial
begin
	firstdigit[2] = 1'b0;
	firstdigit[2] = #170000 1'b1;
	firstdigit[2] = #10000 1'b0;
	firstdigit[2] = #40000 1'b1;
	firstdigit[2] = #60000 1'b0;
	firstdigit[2] = #40000 1'b1;
	firstdigit[2] = #90000 1'b0;
	firstdigit[2] = #350000 1'b1;
	# 200000;
	repeat(15)
	begin
		firstdigit[2] = 1'b0;
		firstdigit[2] = #200000 1'b1;
		# 200000;
	end
	firstdigit[2] = 1'b0;
end 
// firstdigit[ 1 ]
initial
begin
	firstdigit[1] = 1'b0;
	firstdigit[1] = #150000 1'b1;
	firstdigit[1] = #20000 1'b0;
	firstdigit[1] = #50000 1'b1;
	firstdigit[1] = #60000 1'b0;
	firstdigit[1] = #80000 1'b1;
	firstdigit[1] = #50000 1'b0;
	firstdigit[1] = #250000 1'b1;
	# 100000;
	repeat(31)
	begin
		firstdigit[1] = 1'b0;
		firstdigit[1] = #100000 1'b1;
		# 100000;
	end
	firstdigit[1] = 1'b0;
	firstdigit[1] = #100000 1'b1;
	firstdigit[1] = #60000 1'b0;
end 
// firstdigit[ 0 ]
initial
begin
	firstdigit[0] = 1'b0;
	firstdigit[0] = #10000 1'b1;
	firstdigit[0] = #60000 1'b0;
	firstdigit[0] = #70000 1'b1;
	firstdigit[0] = #10000 1'b0;
	firstdigit[0] = #10000 1'b1;
	firstdigit[0] = #10000 1'b0;
	firstdigit[0] = #50000 1'b1;
	firstdigit[0] = #60000 1'b0;
	firstdigit[0] = #130000 1'b1;
	firstdigit[0] = #50000 1'b0;
	firstdigit[0] = #10000 1'b1;
	firstdigit[0] = #50000 1'b0;
	firstdigit[0] = #90000 1'b1;
	# 50000;
	repeat(64)
	begin
		firstdigit[0] = 1'b0;
		firstdigit[0] = #50000 1'b1;
		# 50000;
	end
	firstdigit[0] = 1'b0;
	firstdigit[0] = #50000 1'b1;
	firstdigit[0] = #10000 1'b0;
end 
// seconddigit[ 3 ]
initial
begin
	seconddigit[3] = 1'b0;
	seconddigit[3] = #200000 1'b1;
	seconddigit[3] = #60000 1'b0;
	seconddigit[3] = #100000 1'b1;
	seconddigit[3] = #50000 1'b0;
	seconddigit[3] = #60000 1'b1;
	seconddigit[3] = #50000 1'b0;
	seconddigit[3] = #520000 1'b1;
	# 480000;
	repeat(5)
	begin
		seconddigit[3] = 1'b0;
		seconddigit[3] = #480000 1'b1;
		# 480000;
	end
	seconddigit[3] = 1'b0;
end 
// seconddigit[ 2 ]
initial
begin
	seconddigit[2] = 1'b0;
	seconddigit[2] = #80000 1'b1;
	seconddigit[2] = #40000 1'b0;
	seconddigit[2] = #140000 1'b1;
	seconddigit[2] = #100000 1'b0;
	seconddigit[2] = #440000 1'b1;
	# 240000;
	repeat(11)
	begin
		seconddigit[2] = 1'b0;
		seconddigit[2] = #240000 1'b1;
		# 240000;
	end
	seconddigit[2] = 1'b0;
	seconddigit[2] = #240000 1'b1;
	seconddigit[2] = #160000 1'b0;
end 
// seconddigit[ 1 ]
initial
begin
	seconddigit[1] = 1'b0;
	seconddigit[1] = #80000 1'b1;
	seconddigit[1] = #40000 1'b0;
	seconddigit[1] = #180000 1'b1;
	seconddigit[1] = #60000 1'b0;
	seconddigit[1] = #320000 1'b1;
	# 120000;
	repeat(24)
	begin
		seconddigit[1] = 1'b0;
		seconddigit[1] = #120000 1'b1;
		# 120000;
	end
	seconddigit[1] = 1'b0;
	seconddigit[1] = #120000 1'b1;
	seconddigit[1] = #40000 1'b0;
end 
// seconddigit[ 0 ]
initial
begin
	seconddigit[0] = 1'b0;
	seconddigit[0] = #80000 1'b1;
	seconddigit[0] = #40000 1'b0;
	seconddigit[0] = #160000 1'b1;
	seconddigit[0] = #240000 1'b0;
	seconddigit[0] = #100000 1'b1;
	# 60000;
	repeat(50)
	begin
		seconddigit[0] = 1'b0;
		seconddigit[0] = #60000 1'b1;
		# 60000;
	end
	seconddigit[0] = 1'b0;
end 
// thirddigit[ 3 ]
initial
begin
	thirddigit[3] = 1'b0;
	thirddigit[3] = #30000 1'b1;
	thirddigit[3] = #30000 1'b0;
	thirddigit[3] = #140000 1'b1;
	thirddigit[3] = #50000 1'b0;
	thirddigit[3] = #160000 1'b1;
	thirddigit[3] = #110000 1'b0;
	thirddigit[3] = #600000 1'b1;
	# 560000;
	repeat(4)
	begin
		thirddigit[3] = 1'b0;
		thirddigit[3] = #560000 1'b1;
		# 560000;
	end
	thirddigit[3] = 1'b0;
	thirddigit[3] = #560000 1'b1;
	thirddigit[3] = #240000 1'b0;
end 
// thirddigit[ 2 ]
initial
begin
	thirddigit[2] = 1'b0;
	thirddigit[2] = #100000 1'b1;
	thirddigit[2] = #50000 1'b0;
	thirddigit[2] = #150000 1'b1;
	thirddigit[2] = #50000 1'b0;
	thirddigit[2] = #490000 1'b1;
	# 280000;
	repeat(10)
	begin
		thirddigit[2] = 1'b0;
		thirddigit[2] = #280000 1'b1;
		# 280000;
	end
	thirddigit[2] = 1'b0;
end 
// thirddigit[ 1 ]
initial
begin
	thirddigit[1] = 1'b0;
	thirddigit[1] = #100000 1'b1;
	thirddigit[1] = #50000 1'b0;
	thirddigit[1] = #550000 1'b1;
	# 140000;
	repeat(21)
	begin
		thirddigit[1] = 1'b0;
		thirddigit[1] = #140000 1'b1;
		# 140000;
	end
	thirddigit[1] = 1'b0;
	thirddigit[1] = #140000 1'b1;
	thirddigit[1] = #100000 1'b0;
end 
// thirddigit[ 0 ]
initial
begin
	thirddigit[0] = 1'b0;
	thirddigit[0] = #30000 1'b1;
	thirddigit[0] = #30000 1'b0;
	thirddigit[0] = #300000 1'b1;
	thirddigit[0] = #160000 1'b0;
	thirddigit[0] = #110000 1'b1;
	# 70000;
	repeat(44)
	begin
		thirddigit[0] = 1'b0;
		thirddigit[0] = #70000 1'b1;
		# 70000;
	end
	thirddigit[0] = 1'b0;
	thirddigit[0] = #70000 1'b1;
	thirddigit[0] = #30000 1'b0;
end 
// forthdigit[ 3 ]
initial
begin
	forthdigit[3] = 1'b0;
	forthdigit[3] = #40000 1'b1;
	forthdigit[3] = #40000 1'b0;
	forthdigit[3] = #270000 1'b1;
	forthdigit[3] = #60000 1'b0;
	forthdigit[3] = #60000 1'b1;
	forthdigit[3] = #50000 1'b0;
	forthdigit[3] = #720000 1'b1;
	# 680000;
	repeat(4)
	begin
		forthdigit[3] = 1'b0;
		forthdigit[3] = #680000 1'b1;
		# 680000;
	end
	forthdigit[3] = 1'b0;
end 
// forthdigit[ 2 ]
initial
begin
	forthdigit[2] = 1'b0;
	forthdigit[2] = #210000 1'b1;
	forthdigit[2] = #30000 1'b0;
	forthdigit[2] = #170000 1'b1;
	forthdigit[2] = #60000 1'b0;
	forthdigit[2] = #430000 1'b1;
	# 340000;
	repeat(9)
	begin
		forthdigit[2] = 1'b0;
		forthdigit[2] = #340000 1'b1;
		# 340000;
	end
	forthdigit[2] = 1'b0;
end 
// forthdigit[ 1 ]
initial
begin
	forthdigit[1] = 1'b0;
	forthdigit[1] = #160000 1'b1;
	forthdigit[1] = #10000 1'b0;
	forthdigit[1] = #40000 1'b1;
	forthdigit[1] = #30000 1'b0;
	forthdigit[1] = #170000 1'b1;
	forthdigit[1] = #60000 1'b0;
	forthdigit[1] = #260000 1'b1;
	# 170000;
	repeat(19)
	begin
		forthdigit[1] = 1'b0;
		forthdigit[1] = #170000 1'b1;
		# 170000;
	end
	forthdigit[1] = 1'b0;
end 
// forthdigit[ 0 ]
initial
begin
	forthdigit[0] = 1'b0;
	forthdigit[0] = #40000 1'b1;
	forthdigit[0] = #40000 1'b0;
	forthdigit[0] = #60000 1'b1;
	forthdigit[0] = #20000 1'b0;
	forthdigit[0] = #50000 1'b1;
	forthdigit[0] = #200000 1'b0;
	forthdigit[0] = #60000 1'b1;
	forthdigit[0] = #50000 1'b0;
	forthdigit[0] = #125000 1'b1;
	# 85000;
	repeat(39)
	begin
		forthdigit[0] = 1'b0;
		forthdigit[0] = #85000 1'b1;
		# 85000;
	end
	forthdigit[0] = 1'b0;
end 

mode_vlg_sample_tst tb_sample (
	.firstdigit(firstdigit),
	.forthdigit(forthdigit),
	.seconddigit(seconddigit),
	.thirddigit(thirddigit),
	.sampler_tx(sampler)
);

mode_vlg_check_tst tb_out(
	.mode3(mode3),
	.mode11(mode11),
	.sampler_rx(sampler)
);
endmodule

